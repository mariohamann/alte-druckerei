---
export interface Props {
	title: string;
	body: string;
	website?: string;
	phone?: string;
	email?: string;
}

const { website, phone, email, title, body }: Props = Astro.props;

// remove last Slash form String
const optimizeUrlForView = (string: string) => {
	string = string.replace("https://", "").replace("http://", "");

	if (string.endsWith("/")) {
		return string.slice(0, -1);
	}
	return string;
};

const contactChannels = [
	{
		// remove last slash "/" from string
		label: "Web",
		link: website ? website : null,
	},
	{
		label: "Mail",
		link: email ? `mailto:${email}` : null,
	},
	{
		label: "Phone",
		link: phone ? `tel:${phone}` : null,
	},
].filter((channel) => channel.link);
---

<li
  tabindex="0"
  class="outline-none"
  x-data="{ shown: false }" x-intersect="shown = true"
  x-on:focus="shown = true; $nextTick(() => $focus.first());"
>
  <div 
  x-show="shown"
  x-transition:enter="transition ease-out duration-1000"
  x-transition:enter-start="opacity-0"
  x-transition:enter-end="opacity-100"
	class='bg-white/5 text-white pl-6 h-full py-6 duration-300 border-l-8 group p-8 border-white/10 hover:border-yellow-400 focus-within:border-yellow-400 flex flex-col justify-between'>
	<h2 class='font-bold tracking-wider text-lg lg:text-xl'>
		{title}
	</h2>
	<div class='text-base lg:text-lg flex flex-col justify-between h-full'>
		<p class='mt-3 opacity-80'>
			{body}
		</p>
		<div
			class='mt-8 opacity-80 mb-2 flex'
		>
			{
				contactChannels.map((channel) => (
				<div class='before:ml-3 before:mr-2 before:content-["Â·"] first-of-type:before:content-none'>	
        <a
						class='transition-all underline underline-offset-4 decoration-2 uppercase decoration-transparent hover:decoration-yellow-400 delay-50  text-sm tracking-wide'
						href={channel.link}
						rel='noopener noreferrer'
					>
						{channel.label}
					</a>
          </div>
				))
			}
		</div>
	</div>
  </div>
</li>
